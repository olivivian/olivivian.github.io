<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web开发安全之网站都是怎么被攻击的？</title>
      <link href="/2022/09/03/web%E5%BC%80%E5%8F%91%E5%AE%89%E5%85%A8%E4%B9%8B%E7%BD%91%E7%AB%99%E9%83%BD%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E6%94%BB%E5%87%BB%E7%9A%84%EF%BC%9F/"/>
      <url>/2022/09/03/web%E5%BC%80%E5%8F%91%E5%AE%89%E5%85%A8%E4%B9%8B%E7%BD%91%E7%AB%99%E9%83%BD%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E6%94%BB%E5%87%BB%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>在互联网时代，数据安全和个人隐私一直都是大家很关心的问题，怎么才能更好的保护我们的数据呢？俗话说要知己知彼才能百战不殆，所以先来了解一下Web安全中的各种攻击的类型及原理吧！🤗</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看完本篇你将收获（内容有点多，建议<strong>收藏⭐</strong>在看）</p><ul><li>前端安全大部分的攻击类型及原型解析</li></ul><p>具体如图👇</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905154811350.png" alt="image-20210905154811350"></p><h1 id="Cross-Site-Scripting-XSS"><a href="#Cross-Site-Scripting-XSS" class="headerlink" title="Cross-Site Scripting(XSS)"></a>Cross-Site Scripting(XSS)</h1><p>跨站脚本攻击（XSS），攻击者把他们的脚本恶意的插到我们的页面执行</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/03/image-20210903203022807.png" alt="image-20210903203022807"></p><p><strong>XSS的一些特点</strong></p><ul><li>通常难以从UI上感知(暗地执行脚本)</li><li>窃取用户信息(cookie&#x2F;token)，在用户不知情的情况下，发送恶意请求。</li><li>绘制UI (例如弹窗)，诱骗用户点击&#x2F;填写表单</li></ul><p><strong>XSS原理</strong></p><p>攻击者往Web页面插入恶意可执行网页脚本代码，当用户浏览该页面时，恶意脚本被执行，从而盗取用户信息或侵犯用户其他安全隐私</p><h2 id="Stored-XSS"><a href="#Stored-XSS" class="headerlink" title="Stored XSS"></a>Stored XSS</h2><p><strong>存储型攻击</strong></p><ul><li>恶意脚本被存在数据库中</li><li>访问页面→读数据&#x3D;&#x3D;被攻击</li><li>危害最大，对全部用户可见</li></ul><p>一般存在于 Form 表单提交等交互功能，如文章留言，提交文本信息等，攻击者利用XSS漏洞，将内容经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出的注入代码时，恰好将其渲染执行。</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/04/image-20210904153932547.png" alt="image-20210904153932547"></p><p>就以掘金的评论功能举例，假如它存在存储的 XSS 漏洞，我在某篇文章下面输入以下评论，网站将会显示我输入的内容。如果评论文本包含 HTML 标签，它们将被添加到网页的源代码中；特别是，任何脚本标签都会在页面加载时运行。</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/04/image-20210904143510982.png" alt="image-20210904143510982"></p><p>这样，当其他人加载带有我这个评论的页面时，我的脚本标签都会运行并窃取其他用户的授权 cookie，将其发送到我指定的服务器进行收集。（很明显掘金是有做防御的，所以什么都没有发生。🧐）</p><p>这只是简单的举个例子，XSS攻击也不是这么容易成功的，它需要满足</p><ul><li><p>POST 请求提交表单后端没做转义直接入库。</p></li><li><p>后端从数据库中取出数据没做转义直接输出给前端。</p></li><li><p>前端拿到后端数据没做转义直接渲染成 DOM。</p></li></ul><h2 id="Reflected-XSS"><a href="#Reflected-XSS" class="headerlink" title="Reflected XSS"></a>Reflected XSS</h2><p>反射型攻击（又名非持久型）</p><ul><li>不涉及数据库</li><li>从URL上攻击</li></ul><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/04/image-20210904154116682.png" alt="image-20210904154116682"></p><p>来看一个实例，</p><p>现在页面上有一个输入框，用来提交姓名，提交到服务器端时，服务器立即解析并且直接渲染到页面上。</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/04/image-20210904120554945.png" alt="image-20210904120554945"></p><p>假如没有做任何防护，我们就可以直接通过这个输入框注入脚本，完成一次XSS攻击</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/04/image-20210904121908119.png" alt="image-20210904121908119"></p><p>当前我直接输入了script脚本，提交的时候，脚本被执行了，单单这样看好像没看出有什么危害🤔</p><p>那我们换个写法，现在已知这个地址接受name参数，并且无任何防护，如果我们现在给name注入这么一段代码</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905231910960.png" alt="image-20210905231910960"></p><p>然后用户点击了我们改造的这个链接会发生什么？</p><p>它就会获取用户的所有 cookie，并且发送到 <a href="http://www.cgisecurity.com/cgi-bin/cookie.cgi%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%EF%BC%8C%E8%BF%99%E6%A0%B7%E8%AF%A5%E7%94%A8%E6%88%B7%E7%9A%84%E6%89%80%E6%9C%89%E4%BF%A1%E6%81%AF%E5%B0%B1%E8%A2%AB%E5%88%AB%E4%BA%BA%E7%AA%83%E5%8F%96%E5%88%B0%E4%BA%86%E3%80%82">www.cgisecurity.com/cgi-bin/cookie.cgi这个地址，这样该用户的所有信息就被别人窃取到了。</a></p><blockquote><p>如果直接在浏览器测试，script可能不会生效，因为现在大部分浏览器都会针对<code>script</code>等一些危险标签的插入会做拦截过滤，你可以这样改写</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905231942747.png" alt="image-20210905231942747"></p><p>因为是插入一张图片，浏览器一般不会过滤拦截，然后把<code>src</code>置空使其触发<code>onerror</code>事件，恶意脚本就会间接地被执行；</p></blockquote><blockquote><p>反射攻击是指注入的脚本从 Web 服务器反射出来的攻击，例如错误消息、搜索结果或任何其他响应，其中包括作为请求的一部分发送到服务器的部分或全部输入。反射攻击通过另一条路径传递给受害者，例如在电子邮件中或在其他网站上。当用户被诱骗点击恶意链接、提交特制表单，甚至只是浏览恶意站点时，注入的代码会传播到易受攻击的网站，从而将攻击反映回用户的浏览器。然后浏览器执行代码，因为它来自“受信任的”服务器。</p><p>反射型XSS攻击的特点在于即时性，它不需要存储在服务器中，通过巧妙地构造一个带恶意代码的URL，然后引导用户点击访问，即可实现攻击</p></blockquote><h2 id="DOM-based-XSS"><a href="#DOM-based-XSS" class="headerlink" title="DOM-based XSS"></a>DOM-based XSS</h2><p>基于DOM</p><ul><li>不需要服务器的参与</li><li>恶意攻击的发起+执行，全在浏览器完成</li></ul><p>还是先来看一个例子，假设以下代码用于创建一个表单，让用户选择他们喜欢的语言。查询字符串中还提供了默认语言，作为参数“default”。</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232008016.png" alt="image-20210905232008016"></p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905210650632.png" alt="image-20210905210650632"></p><p>该页面是使用 URL 调用的，例如：</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232025458.png" alt="image-20210905232025458"></p><p>针对该页面的基于 DOM 的 XSS 攻击可以通过向受害者发送以下 URL 来完成：</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232039405.png" alt="image-20210905232039405"></p><p>当受害者点击这个链接时，浏览器会发送一个请求：</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232052579.png" alt="image-20210905232052579"></p><p>到 <a href="http://www.some.site.服务器以包含上述/">www.some.site。服务器以包含上述</a> Javascript 代码的页面进行响应。浏览器为页面创建一个 DOM 对象，其中 document.location 对象包含字符串：</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232105798.png" alt="image-20210905232105798"></p><p>页面中的原始 Javascript 代码不希望默认参数包含 HTML 标记，因此它只是在运行时对其进行解码并将其回显到页面 (DOM) 中。然后浏览器呈现结果页面并执行攻击者的脚本：</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232118412.png" alt="image-20210905232118412"></p><p>看到这里是不是觉得，这不是和上面的反射性一样吗？🤨</p><p>首先从两个示例的链接来看,结构完全一样，但是如果我们这样改造一下，把<code>？号</code>改成<code>#号</code></p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232159500.png" alt="image-20210905232159500"></p><p>在尝试执行，会发现，Reflected XSS（反射型）不在生效，而DOM-based XSS（基于DOM）的攻击依然生效。</p><blockquote><p>浏览器不会将 URI 片段（URI 中“#”之后的部分）发送到服务器</p></blockquote><h2 id="Reflected-XSS-和DOM-based-XSS的区别"><a href="#Reflected-XSS-和DOM-based-XSS的区别" class="headerlink" title="Reflected XSS 和DOM-based XSS的区别"></a>Reflected XSS 和DOM-based XSS的区别</h2><p>Reflected XSS（反射型）和DOM-based XSS（基于DOM）的区别就是完成注入脚本的地方不同，在基于 DOM 的 XSS 攻击中，恶意数据不会触及 Web 服务器。相反，它由 JavaScript 代码完全反映在客户端。</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/03/image-20210903203703407.png" alt="image-20210903203703407"></p><h2 id="Mutation-based-XSS"><a href="#Mutation-based-XSS" class="headerlink" title="Mutation-based XSS"></a>Mutation-based XSS</h2><p>突变型XSS，也叫做mXSS</p><blockquote><p>mutation，突变，来自遗传学的一个单词，gene mutation（即基因突变）</p></blockquote><ul><li><p>利用了浏览器渲染DOM的特性(独特优化)</p></li><li><p>不同浏览器，会有区别(按浏览器进行攻击)</p></li></ul><p>不论是服务器端或客户端的XSS过滤器，都认定过滤后的HTML源代码应该与浏览器所渲染后的HTML代码保持一致，至少不会出现很大的出入。</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/04/image-20210904223150612.png" alt="image-20210904223150612"></p><p>然而，如果用户所提供的富文本内容通过javascript代码进入innerHTML属性后，一些意外的变化会使得这个认定不再成立：一串看似没有任何危害的HTML代码，将逃过XSS过滤器的检测，最终进入某个DOM节点的innerHTML中，浏览器的渲染引擎会将本来没有任何危害的HTML代码渲染成具有潜在危险的XSS攻击代码。随后，该段攻击代码，可能会被JS代码中的其它一些流程输出到DOM中或是其它方式被再次渲染，从而导致XSS的执行。</p><blockquote><p>这种由于HTML内容进入innerHTML后发生意外变化，而最终导致XSS的攻击流程，被称为突变XSS</p></blockquote><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/04/image-20210904160201378.png" alt="image-20210904160201378"></p><p>mXSS的几种类型，下面我们挑几个来说，想要了解更多可以看这篇文章👉 <a href="https://cure53.de/fp170.pdf">fp170.pdf</a>  </p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/04/image-20210904230038546.png" alt="image-20210904230038546"></p><h3 id="3-1-Backtick-Characters-breaking-Attribute-Delimiter-Syntax"><a href="#3-1-Backtick-Characters-breaking-Attribute-Delimiter-Syntax" class="headerlink" title="3.1 Backtick Characters breaking Attribute Delimiter Syntax"></a>3.1 Backtick Characters breaking Attribute Delimiter Syntax</h3><p>反引号打破属性边界导致的 mXSS</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/04/image-20210904231020779.png" alt="image-20210904231020779"></p><p>可以看到，突变后的形式变成了有效的XSS攻击</p><h3 id="3-3-Backslashes-in-CSS-Escapes-causing-StringBoundary-Violation"><a href="#3-3-Backslashes-in-CSS-Escapes-causing-StringBoundary-Violation" class="headerlink" title="3.3 Backslashes in CSS Escapes causing StringBoundary Violation"></a>3.3 Backslashes in CSS Escapes causing StringBoundary Violation</h3><p>CSS中反斜线转义导致的mXSS</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/04/image-20210904231549813.png" alt="image-20210904231549813"></p><blockquote><p>在CSS中，允许用\来对字符进行转义，例如：<code>property: &#39;v\61 lue&#39;</code> 表示 <code>property:&#39;value&#39;</code>，其中61是字母a的ascii码（16进制）。\后也可以接unicode，例如：\20AC 表示 € 。正常情况下，这种转义不会有问题。</p><p>然而，一些现代浏览器打破了 CSS 转义的正确和标准驱动使用所表明的安全承诺。特别是，它发生在访问父元素的innerHTML 属性时。我们观察到一种将转义转换为其规范表示的行为。序列属性：’val\27ue’ 将导致innerHTML 表示属性：’val’ue’。攻击者可以通过注入隐藏在正确引用和转义的 CSS 字符串中的任意 CSS 代码来滥用此行为。通过这种方式，可以绕过检查符合标准的有效代码的 HTML 过滤器</p></blockquote><h3 id="3-4-Misfit-Characters-in-Entity-Representation-breaking-CSS-Strings"><a href="#3-4-Misfit-Characters-in-Entity-Representation-breaking-CSS-Strings" class="headerlink" title="3.4 Misfit Characters in Entity Representation breaking CSS Strings"></a>3.4 Misfit Characters in Entity Representation breaking CSS Strings</h3><p>CSS中双引号实体或转义导致的mXSS</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/04/image-20210904234016829.png" alt="image-20210904234016829"></p><blockquote><p>一些浏览器中，使用 CSS 字符串中的字符，渲染引擎将它们转换为单引号，不管这两个字符看起来不相关。 这意味着 \22,<br>&quot;, &amp;#x22; 和 &amp;#34; 字符序列将在 innerHTML 访问时转换为 ’ 字符。</p><p>只能推测这种令人惊讶的行为的原因。一种可能的解释是：\22 先被解码为 “，但考虑到双引号会闭合掉style属性，所以浏览器渲染引擎将”进一步转变为了’，以避免这种情况的发生。当然，这也意味这，除了 \22，\0022 之外，HTML实体如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&amp;quot; &amp;#x22; &amp;#34; </span><br></pre></td></tr></table></figure><p>等双引号的表示形式均可导致这类问题。</p></blockquote><h3 id="3-5-CSS-Escapes-in-Property-Names-violating-entire-HTML-Structure"><a href="#3-5-CSS-Escapes-in-Property-Names-violating-entire-HTML-Structure" class="headerlink" title="3.5 CSS Escapes in Property Names violating entire HTML Structure"></a>3.5 CSS Escapes in Property Names violating entire HTML Structure</h3><p>CSS属性名中的转义所导致的mXSS</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/04/image-20210904235230335.png" alt="image-20210904235230335"></p><blockquote><p>之前说的都是在 CSS 属性值中的一些情况，如果是在CSS 属性名称中使用，也会迫使一些浏览器进入完全不同的行为；</p><p>可以看到，我们用转义的内容，嵌入到font-family的属性名中，突变后，\22被解码回双引号，并且闭合掉了style属性，从而我们可以通过onload事件执行javascript代码，需要注意的是，&#x3D;号，括号等也需要被写为转义形式。我们亦可在\22后加上\3e来闭合掉img标签，并在此之后插入自己的HTML标签。</p></blockquote><blockquote><p>Mutation-based XSS攻击示例节选译自以下文档（英文好的建议自行阅读原文，如有错误请在评论区指出）</p><p>👉 <a href="https://cure53.de/fp170.pdf">fp170.pdf</a>  </p><p>👉<a href="https://cure53.de/fp170.pdf">mXSS Attacks: Attacking well-secured Web-Applications by using innerHTML Mutations</a></p></blockquote><h1 id="Cross-Site-Request-Forgery-CSRF"><a href="#Cross-Site-Request-Forgery-CSRF" class="headerlink" title="Cross Site Request Forgery (CSRF)"></a>Cross Site Request Forgery (CSRF)</h1><p>跨站请求伪造</p><p>CSRF 是一种诱骗受害者提交恶意请求的攻击。它继承了受害者的身份和特权以代表【受害者】执行不需要的功能。</p><p><strong>CSRF特点</strong></p><ul><li>在用户不知情的前提下</li><li>利用用户权限(cookie)</li><li>构造指定HTTP 请求，窃取或修改用户敏感信息</li></ul><p><strong>CSRF的攻击流程</strong></p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905010637766.png" alt="image-20210905010637766"></p><p><strong>举个例子</strong></p><p>用户收到了一封邮件，邮件中有一个链接，用户点击链接，跳转到了恶意的页面B，在恶意页面B中向A发了一个请求，此时这个请求会带有域名A特有的Cookie，域名A所在的服务器接受到这个请求之后，去验证这个Cookie，发现是合法用户，则进行了下一步请求，返回了成功的结果。</p><p>在这整个过程中</p><ul><li>用户没有访问页面A</li><li>页面A中的特定接口被请求</li><li>请求执行成功</li></ul><p>这就是跨站伪造请求</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/03/image-20210903205030750.png" alt="image-20210903205030750"></p><h2 id="GET类型的CSRF"><a href="#GET类型的CSRF" class="headerlink" title="GET类型的CSRF"></a>GET类型的CSRF</h2><p><strong>举个例子</strong></p><p>假如应用程序设计为主要使用 GET 请求来传输参数和执行操作，则汇款操作可能会简化为如下请求</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232220622.png" alt="image-20210905232220622"></p><p>【hacker😈】现在决定使用【张三😇】作为受害者来利用此 Web 应用程序漏洞。【hacker】 首先利用漏洞来构建以下 URL，该 URL 将从【张三】的账户转移 100,000 元到 【hacker】 的账户。【hacker】使用原始命令 URL 并将收款人名称替换为自己，同时显着提高了转账金额：</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232233680.png" alt="image-20210905232233680"></p><p>当【张三】登录到银行应用程序时，诱导他来点击恶意的URL，通常会这样做</p><ul><li>发送带有 HTML 内容的未经请求的电子邮件</li><li>在受害者在进行网上银行业务时可能访问的页面上植入漏洞利用 URL 或脚本</li></ul><p>漏洞利用 URL 可以伪装成一个普通的链接，鼓励受害者点击它，如伪装成一个抽奖链接</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232246808.png" alt="image-20210905232246808"></p><p>或者作为 0x0 假图像发送给【张三】</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232304499.png" alt="image-20210905232304499"></p><p>如果此图像标签包含在电子邮件中，【张三】将看不到任何内容。但是，浏览器<em>仍会</em>向 bank.com 提交汇款请求，在【张三】毫不知情的情况下，他的钱就被转走啦！🥶</p><h2 id="POST类型的CSRF"><a href="#POST类型的CSRF" class="headerlink" title="POST类型的CSRF"></a>POST类型的CSRF</h2><p>GET 和 POST 攻击之间的唯一区别是受害者如何执行攻击。假设银行现在使用 POST 并且易受攻击的请求如下所示：</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232316001.png" alt="image-20210905232316001"></p><p>此类请求无法通过a标签链接 或 IMG 标签传递，但可以使用 FORM 标签传递：</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232326918.png" alt="image-20210905232326918"></p><p>这个表单将要求用户单击提交按钮，但这也可以使用 JavaScript 自动执行：</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232341528.png" alt="image-20210905232341528"></p><p>这样在受害者不知情的情况下，钱又被转走啦！🥶🥶🥶</p><h2 id="与-xss-区别"><a href="#与-xss-区别" class="headerlink" title="与 xss 区别"></a>与 xss 区别</h2><ul><li>通常来说 CSRF 是由 XSS 实现的，CSRF 时常也被称为XSRF（CSRF 实现的方式还可以是直接通过命令行发起请求等）。</li><li>本质上讲，XSS 是代码注入问题，CSRF 是 HTTP 问题。XSS 是内容没有过滤导致浏览器将攻击者的输入当代码执行。CSRF 则是因为浏览器在发送 HTTP 请求时候自动带上 cookie，而一般网站的 session 都存在 cookie里面。</li></ul><h1 id="Injection"><a href="#Injection" class="headerlink" title="Injection"></a>Injection</h1><p>注入</p><h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><p>所谓 SQL 注入，就是通过把 SQL 命令插入到 Web 表单提交或页面请求的查询字符串，最终执行恶意的 SQL 命令。</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/03/image-20210903211351360.png" alt="image-20210903211351360"></p><p>以常用的登录为例，表单代码如下</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232355409.png" alt="image-20210905232355409"></p><p>后端的 SQL 语句可能是这样的</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232407080.png" alt="image-20210905232407080"></p><p>但如果有一个恶意攻击者输入的用户名是 <code>admin&#39; --</code>，密码随意输入，就可以直接登入系统了，为什么？</p><p>因为本来预想的SQL 语句是</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232419995.png" alt="image-20210905232419995"></p><p>但是恶意攻击者用奇怪用户名将你的 SQL 语句变成了如下形式</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232431571.png" alt="image-20210905232431571"></p><p>在 SQL 中,<code>&#39; --</code>是闭合和注释的意思，– 是注释后面的内容的意思，所以查询语句就变成了</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232446277.png" alt="image-20210905232446277"></p><h2 id="Injection不止于SQL"><a href="#Injection不止于SQL" class="headerlink" title="Injection不止于SQL"></a>Injection不止于SQL</h2><p>除了SQL的注入，还有可能是通过一些命令注入攻击，如</p><ul><li>CLl</li><li>OS command</li><li>Server- Side Request Forgery(SSRF)，服务端伪造请求<ul><li>严格而言，SSRF不是injection,但是原理类似</li></ul></li></ul><p>命令注入攻击可以向Shell发送命令，让Windows或Linux操作系统的命令行启动程序。也就是说，通过命令注入攻击可执行操作系统上安装着的各种程序。</p><p>假如需要实现一个需求：用户提交一些内容到服务器，然后在服务器执行一些系统命令去返回一个结果给用户</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905232506517.png" alt="image-20210905232506517"></p><p>如果 <code>params.repo</code> 传入的是 <code>https://github.com/admin/admin.github.io.git</code> 确实能从指定的 git repo 上下载到想要的代码。 但是如果 <code>params.repo</code> 传入的是 <code>https://github.com/xx/xx.git &amp;&amp; rm -rf /* &amp;&amp;</code>， 恰好你的服务是用 root 权限起的就糟糕了。</p><h1 id="Denial-of-Service-DoS"><a href="#Denial-of-Service-DoS" class="headerlink" title="Denial of Service(DoS)"></a>Denial of Service(DoS)</h1><p>DoS(Denial of Service)，即拒绝服务，造成远程服务器拒绝服务的行为被称为DoS攻击。其目的是使计算机或网络无法提供正常的服务</p><blockquote><p>通过某种方式(构造特定请求)，导致服务器资源被显著消耗，来不及响应更多请求，导致请求挤压，进而雪崩效应。</p></blockquote><h2 id="ReDoS-基于正则表达式的DoS"><a href="#ReDoS-基于正则表达式的DoS" class="headerlink" title="ReDoS:基于正则表达式的DoS"></a>ReDoS:基于正则表达式的DoS</h2><p>根据正则的贪婪模式特性构造正则表达式，使其因为一直匹配不上，导致接口的响应时间变长</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/03/image-20210903212045717.png" alt="image-20210903212045717"></p><h1 id="Distributed-DoS-DDoS"><a href="#Distributed-DoS-DDoS" class="headerlink" title="Distributed DoS(DDoS)"></a>Distributed DoS(DDoS)</h1><p>DDOS(Distributed Denial of Service)攻击全称分布式拒绝服务。是DoS攻击的一种方法。</p><p>指借助于客户&#x2F;服务器技术，将多个计算机联合起来作为攻击平台，对一个或多个目标发动DDoS攻击，从而成倍地提高拒绝服务攻击的威力。阻止合法用户对正常网络资源的访问，从而达成攻击者不可告人的目的。DDoS的攻击策略侧重于通过很多“僵尸主机”，向受害主机发送大量看似合法的网络包，从而造成网络阻塞或服务器资源耗尽而导致拒绝服务。</p><blockquote><p>即短时间内，来自大量僵尸设备的请求流量，服务器不能及时完成全部请求，导致请求堆积，进而雪崩效应，无法响应新请求。</p></blockquote><p>攻击特点</p><ul><li>直接访问IP</li><li>任意API</li><li>消耗大量带宽(耗尽)</li></ul><h2 id="SYN-攻击"><a href="#SYN-攻击" class="headerlink" title="SYN 攻击"></a>SYN 攻击</h2><p>属于 DDOS 攻击中的一种具体表现形式。</p><p>在三次握手过程中，服务器发送 SYN-ACK 之后，收到客户端的 ACK 之前的 TCP 连接称为半连接(half-open connect)。此时服务器处于 SYN_RCVD 状态。当收到 ACK 后，服务器才能转入 ESTABLISHED 状态.</p><p>SYN 攻击指的是，攻击客户端在短时间内伪造大量不存在的 IP 地址，向服务器不断地发送 SYN 包，服务器回复确认包，并等待客户的确认。</p><p>由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的 SYN 包将长时间占用未连接队列，正常的 SYN 请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/03/image-20210903212508238.png" alt="image-20210903212508238"></p><p><strong>打个比方</strong></p><p>一群恶霸试图让对面那家有着竞争关系的商铺无法正常营业，他们会采取什么手段呢？（只为举例，切勿模仿）</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905021614078.png" alt="image-20210905021614078"></p><p>恶霸们扮作普通客户一直拥挤在对手的商铺，赖着不走，真正的购物者却无法进入；或者总是和营业员有一搭没一搭的东扯西扯，让工作人员不能正常服务客户；也可以为商铺的经营者提供虚假信息，商铺的上上下下忙成一团之后却发现都是一场空，最终跑了真正的大客户，损失惨重。</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905021944509.png" alt="image-20210905021944509"></p><p>此外恶霸们完成这些坏事有时凭单干难以完成，需要叫上很多人一起。网络安全领域中 DoS 和 DDoS 攻击就遵循着这些思路。</p><h1 id="传输层-MITM攻击"><a href="#传输层-MITM攻击" class="headerlink" title="传输层(MITM攻击)"></a>传输层(MITM<em>攻击</em>)</h1><p>中间人攻击(Man-in-the-MiddleAttack，简称“MITM<em>攻击</em>”)。</p><p>是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方 直接对话，但事实上整个会话都被攻击者完全控制。在中间人攻 击中，攻击者可以拦截通讯双方的通话并插入新的内容。</p><blockquote><p>直白的说就是，浏览器和服务器彼此以为在互相沟通，但实际上有一个中间人在里面插了插了一脚，窃取了信息或者修改了请求等。</p></blockquote><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905145019218.png" alt="image-20210905145019218"></p><p><strong>用日常生活的写信来类比的话</strong>：</p><p>你给朋友写了一封信，邮递员可以把每一份你寄出去的信都拆开看，甚至把信的内容改掉，然后重新封起来，再寄出去给你的朋友。</p><p>朋友收到信之后给你回信，邮递员又可以拆开看，看完随便改，改完封好再送到你手上。</p><p>你全程都不知道自己寄出去的信和收到的信都经过邮递员这个“中间人”转手和处理</p><p>——换句话说，对于你和你朋友来讲，邮递员这个“中间人”角色是不可见的。</p><p><strong>中间人攻击类型大致有</strong></p><ul><li>Wi-Fi欺骗，<em>攻击者创建与本地免费Wi-Fi同名的虚假Wi-Fi接入点</em></li><li>HTTPS欺骗，<em>攻击者通过欺骗我们的浏览器，让我们认为自己访问的是可信任站点</em></li><li>SSL劫持，<em>当我们尝试连接或访问不安全的HTTP:&#x2F;&#x2F;站点时，浏览器会自己重定向到安全的HTTPS:&#x2F;&#x2F;处。这个时候攻击者就可以劫持这个重定向的过程，将其指向自建服务器的链接植入其中</em></li><li>DNS欺骗，<em>使浏览器URL转化异常，从而访问一些恶意的地址</em></li><li>电子邮件劫持</li></ul><p><strong>为什么中间人可以进行这种攻击？</strong></p><p>1、请求的所有的信息都是明文传输的，谁都可见</p><p>2、请求信息被篡改时，接收方并不知道</p><p>3、双方并没有对彼此的身份进行未验证</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>跨站脚本攻击（XSS）</strong>，即攻击者把他们的脚本恶意的插到我们的页面执行；</p><ul><li>1）存储型攻击（Stored XSS），即恶意脚本会被存在数据库中</li><li>2）反射型攻击（Reflected XSS），又名非持久，因为不会被储存到数据库，只是从URL上进行攻击</li><li>3）基于DOM的攻击（DOM-based XSS），不需要服务器的参与，恶意攻击的发起+执行，全在浏览器完成；<br>恶意攻击的发起+执行，全在浏览器完成</li><li>4）突变型攻击（Mutation-based XSS），利用浏览器渲染DOM的特性，对浏览器针对性的攻击，比如：反引号打破属性边界、CSS中属性值&#x2F;属性名的转义等</li></ul><blockquote><p>反射型和基于DOM的主要区别就是完成注入脚本的地方不同</p></blockquote><p>**跨站请求伪造(CSRF)**，诱导用户打开黑客的网站，窃取用户登录信息，冒充用户身份进行恶意的操作。</p><ul><li>1）GET类型的CSRF</li><li>2）POST类型的CSRF</li></ul><blockquote><p>GET和POST攻击的区别是受害者如何执行攻击</p></blockquote><blockquote><p>跨站脚本攻击（XSS）和跨站请求伪造(CSRF)的区别，本质上讲，XSS 是代码注入问题，CSRF 是 HTTP 问题。</p></blockquote><p><strong>注入攻击Injection</strong></p><ul><li>1）SQL 注入攻击，通过把 SQL 命令插入到 Web 表单提交或页面请求的查询字符串，最终执行恶意的 SQL 命令</li><li>2）命令注入攻击</li></ul><p>**DoS攻击(Denial of Service)**，造成远程服务器拒绝服务的攻击，目的是使计算机或网络无法提供正常的服务</p><p>**DDOS攻击(Distributed Denial of Service)**，分布式拒绝服务</p><p><strong>MITM攻击（Man-in-the-MiddleAttack）</strong>，中间人攻击，针对传输层的攻击</p><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>分析各种web攻击手段是为了能够让我们更好的进行防御，没有让大家去攻击别人的意思啊w(ﾟДﾟ)w！（以上全部示例仅用于举例，切勿模仿👻）</p><p>参考资料：</p><p><a href="https://owasp.org/www-community/attacks/xss/">Cross Site Scripting (XSS)</a></p><p><a href="https://owasp.org/www-community/attacks/DOM_Based_XSS">DOM Based XSS</a></p><p><a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">XSS Filter Evasion Cheat Sheet</a></p><p><a href="https://en.wikipedia.org/wiki/Cross-site_scripting#cite_note-11">Cross-site scripting</a></p><p><a href="https://www.cgisecurity.com/xss-faq.html">The Cross-Site Scripting (XSS)</a> </p><p><a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery">Cross-site request forgery</a></p><p><a href="https://owasp.org/www-community/attacks/csrf">Cross Site Request Forgery (CSRF)</a></p><p><a href="https://zhuanlan.zhihu.com/p/25486768?group_id=820705780520079360">谈谈对 Web 安全的理解</a></p><p><a href="https://juejin.cn/post/6844903772930441230#heading-31">常见六大Web安全攻防解析</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/MitM">MDN—中间人攻击（MitM）</a></p><p><a href="https://baike.baidu.com/item/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/1739730?fr=aladdin">百度百科—中间人攻击</a></p><blockquote><p>本文作者：Axjy<br>微信公众号：Axjy前端学习库<br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/">CC BY-NC-SA 3.0 CN 许可协议</a>。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web开发安全之网站都是怎么被攻击的？</title>
      <link href="/2022/09/03/%E6%96%B0%E6%96%87%E7%AB%A0/"/>
      <url>/2022/09/03/%E6%96%B0%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p> <img src="/2022/09/03/%E6%96%B0%E6%96%87%E7%AB%A0/01.jpg" alt="新生"></p><blockquote><p>测试测试</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web开发安全之怎么防御各种攻击手段</title>
      <link href="/2022/09/03/web%E5%BC%80%E5%8F%91%E5%AE%89%E5%85%A8%E4%B9%8B%E6%80%8E%E4%B9%88%E9%98%B2%E5%BE%A1%E5%90%84%E7%A7%8D%E6%94%BB%E5%87%BB%E6%89%8B%E6%AE%B5/"/>
      <url>/2022/09/03/web%E5%BC%80%E5%8F%91%E5%AE%89%E5%85%A8%E4%B9%8B%E6%80%8E%E4%B9%88%E9%98%B2%E5%BE%A1%E5%90%84%E7%A7%8D%E6%94%BB%E5%87%BB%E6%89%8B%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p>在互联网时代，数据安全和个人隐私一直都是大家很关心的问题，要怎么保护我们的应用以及数据呢？上篇以及分析了各种攻击手段，现在我们就来看看怎么防御！🤗</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看完本篇你将收获</p><ul><li>✅跨站脚本攻击XSS（Cross-Site Scripting）的大部分防御措施</li><li>✅跨站请求伪造CSRF（Cross Site Request Forgery ）攻击的大部分防御措施</li><li>✅注入Injection攻击的的防御措施</li><li>✅其他一些防御措施及个人用户的安全建议</li></ul><h1 id="XSS的防御"><a href="#XSS的防御" class="headerlink" title="XSS的防御"></a>XSS的防御</h1><p>1、永远不要信任用户的提交内容🚫，应该做输入过滤</p><blockquote><p>例如：邮箱，电话号码，用户名，密码……等输入格式的检查，使用户只能按照规定的格式输入。</p><p>移除用户上传的DOM属性，如onerror等，移除用户上传的style节点，script节点，iframe节点等</p><p>不仅前端需要做过滤，后端同样也需要，因为攻击者完全可以绕过正常输入，直接利用相关接口发送信息。</p></blockquote><p>2、不要将用户提交内容直接插入到页面，建议做一些HTML转义操作</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905151054329.png" alt="image-20210905151054329"></p><p>3、cookies设置HttpOnly</p><blockquote><p>这样可以禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此 Cookie。</p></blockquote><p>4、验证码：防止脚本冒充用户提交危险操作❗❗❗</p><p>5、少用 <code>.innerHTML</code>、<code>.outerHTML</code>、<code>document.write()</code>等直接插入html的方式，而改用安全性更高的<code>.textContent</code>、<code>.setAttribute()</code> 等</p><blockquote><p>避免把攻击者恶意编写的脚本注入到代码中</p></blockquote><p>6、注意使用DOM 中的内联事件监听器，如 <code>location</code>、<code>onclick</code>、<code>onerror</code>、<code>onload</code>、<code>onmouseover</code> 等，<code>&lt;a&gt;</code> 标签的 <code>href</code> 属性，JavaScript 的 <code>eval()</code>、<code>setTimeout()</code>、<code>setInterval()</code> 等</p><blockquote><p>因为它们都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患</p></blockquote><p>7、开启CSP防护。将CSP设置成<code>Content-Security-Policy: script-src &#39;self&#39;</code>，就可以开启。</p><blockquote><p>内容安全策略（CSP）的设计就是为了防御XSS攻击的，开启之后则网站将不允许内联脚本执行，禁止加载外域代码，禁止外域提交。虽然可以有效的防止XSS攻击，但是因为过于严格可能对自身业务开发造成一定的限制👉 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP">MDN CSP</a></p></blockquote><h2 id="利用现成的工具"><a href="#利用现成的工具" class="headerlink" title="利用现成的工具"></a>利用现成的工具</h2><ul><li>主流框架默认防御XSS</li><li>或者使用一些第三方库帮助过滤，如<a href="https://github.com/cure53/DOMPurify">DOMPurify</a> （针对 HTML、MathML 和 SVG 的仅支持DOM、快速、高容错的 XSS 过滤器）</li></ul><h2 id="可能被XSS攻击的实例"><a href="#可能被XSS攻击的实例" class="headerlink" title="可能被XSS攻击的实例"></a>可能被XSS攻击的实例</h2><p>1、使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMParser">DOMParser</a>把srting转化为DOM时，可能携带执行脚本（需要过滤）</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905192746564.png" alt="image-20210905192746564"></p><p>2、用户上传svg图片时，svg中可以内嵌sctipt标签（需要过滤）</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905193418138.png" alt="image-20210905193418138"></p><p>3、允许用户自定义跳转链接，a标签的跳转链接是可以被写成js代码的，所以最好不要允许</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905194005432.png" alt="image-20210905194005432"></p><p>4、让用户自定义样式，举个例子，假如有这样一个选项组</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905194507424.png" alt="image-20210905194507424"></p><p>它的选中是这样写的</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905194659211.png" alt="image-20210905194659211"></p><p>当用户选择指定选项时，background才切换成某一个，而此时background会发送一个get请求，并且会带上一个选中的信息，这个时候就有可能受到XSS攻击</p><p>所以首先不要这样写！不要这样写！不要这样写！👻，其次需要注意类似background这种可以发送请求的属性，最后一定要用，一定记得做过滤！！！🥶</p><h1 id="CSRF的防御"><a href="#CSRF的防御" class="headerlink" title="CSRF的防御"></a>CSRF的防御</h1><p>1、利用验证码，强制用户必须与应用进行交互，才能完成最终请求</p><blockquote><p>如果验证码使用的太频繁，会导致用户体验很不好💥，所以一般只用于特殊操作。</p><p>【CSRF 攻击的过程，往往是在用户不知情的情况下发生的，在用户不知情的情况下构造网络请求】</p></blockquote><p>2、检查 HTTP Referer 字段</p><blockquote><p>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址，如果我们能判断当前HTTP请求的来源地址，只允许来自本网站的的请求才能访问，那么CSRF攻击就失效了。不过需要知道的是某些浏览器的Referer值可以被篡改。</p><p>【CSRF的攻击来源通常是来自第三方网站】</p></blockquote><p>3、使用token，token 验证的 CSRF 防御机制是公认最合适的方案</p><blockquote><p>后端随机产生一个 token，把这个token 保存到 session 状态中；同时后端把这个token 交给前端，前端页面提交请求时，把 token 加入到请求数据或者头信息中，一起传给后端，端验证前端传来的 token 与 session 是否一致，不一致则拒绝该请求。</p><p>【<code>CSRF</code>攻击之所以能够成功，是因为攻击者可以伪造用户的请求，该请求中所有的用户验证信息都存在于 <code>cookie</code>中，因此攻击者可以在不知道用户验证信息的情况下直接利用用户的 <code>cookie</code>来通过安全验证。】</p></blockquote><p>token应该和用户信息绑定，因为攻击者自己也可以通过注册用户去获取token；token应该设置过期时间；</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/05/image-20210905200730871.png" alt="image-20210905200730871"></p><p>4、Cookie 的 SameSite 属性👉<a href="http://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html"><code>SameSite</code>属性</a></p><p>5、其他，get请求不对数据进行修改，服务器端设置 X-Frame-Options 响应头，防止页面被内嵌。</p><h1 id="Injection的防御"><a href="#Injection的防御" class="headerlink" title="Injection的防御"></a>Injection的防御</h1><p>1、数据校验，还是那句话，永远不要信任用户的输入🚫</p><blockquote><p>对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和双”-“进行转换等。</p></blockquote><p>2、不要使用动态拼装 SQL</p><blockquote><p>可以使用参数化的 SQL 或者直接使用存储过程进行数据查询存取。</p></blockquote><p>3、严格的权限管理（最小权限原则）</p><blockquote><p>严格限制Web应用的数据库的操作权限,只给用户提供仅仅能够满足其工作的最低权限,从而最大限度的 减少注入攻击对数据库的危害</p></blockquote><p>4、不要把机密信息直接存放</p><blockquote><p>加密或者 hash 掉密码和敏感的信息。</p></blockquote><p>5、特殊字符转义</p><blockquote><p>对进入数据库的特殊字符（’,”,,&lt;,&gt;,&amp;,*,; 等）进行转义处理,或编码转换</p></blockquote><p>6、查询SQL的地方使用 <a href="https://www.cnblogs.com/geaozhang/p/9891338.html">prepared statement</a></p><h1 id="防御DoS和防御DDoS"><a href="#防御DoS和防御DDoS" class="headerlink" title="防御DoS和防御DDoS"></a>防御DoS和防御DDoS</h1><p>不太懂就不细说了😗</p><p>SYN 攻击防护（只是DDoS的一种）：</p><ol><li>缩短超时（SYN Timeout）时间</li><li>增加最大半连接数</li><li>过滤网关防护</li></ol><blockquote><p>哈哈哈🤣，黑客为了逼迫 Github 移除反审查项目Greatfire，对它进行了DDoS攻击</p><p><a href="https://www.leiphone.com/category/gbsecurity/s6FdUv4tcJ9OJwfI.html">GitHub 遭遇有史以来最严重DDoS攻击</a></p></blockquote><h1 id="防御中间人"><a href="#防御中间人" class="headerlink" title="防御中间人"></a>防御中间人</h1><p>浏览器和服务器双方并没有对彼此的身份进行未验证，从而给中间人创造了攻击的条件，所以只需要增加一个安全通道来传输信息。HTTPS 就可以用来防御中间人攻击。</p><blockquote><p>如果你没有完全关闭 HTTP 访问的话，攻击方还是可以通过某些方式将 HTTPS 降级为 HTTP 从而实现中间人攻击。</p></blockquote><h1 id="个人用户的web安全建议"><a href="#个人用户的web安全建议" class="headerlink" title="个人用户的web安全建议"></a>个人用户的web安全建议</h1><p>🎨  不要忽视浏览器弹出的证书警告！你可能访问的是钓鱼网站或者假冒的服务器；</p><p>🎨  建议尽量不使用公共的 Wi-Fi，因为很可能就会发生中间人攻击的情况。如果你在通信的过程中涉及到了某些敏感信息，就完全暴露给攻击方了；</p><p>🎨  在任何网站上登录自己的账号前确保网址是走的HTTPS加密协议；</p><p>🎨  使用网页版邮件的浏览邮件或者新闻也会带来额外的风险，因为查看邮件或者新闻消息有可能导致恶意代码的攻击。</p><p>🎨 尽量不要打开可疑的链接，一定要打开时，使用不常用的浏览器。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>防御简单的总结就是</p><ul><li>过滤！过滤！过滤！</li><li>检查！检查！检查！</li></ul><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>因为好玩去黑网站的人，还是少数的，大多数攻击都是为了有利可图，我们不可能确保自己的应用绝对无法被攻击，但是只要攻击我们的时候，黑客花费的成本远比他可以获取的利益大得多，黑客就不会去攻击。防范强如支付宝、QQ等产品，也都曾被报过漏洞，所以防御不是绝对的，我们只能想办法让我们的应用更加安全。</p><p>参考资料：</p><p><a href="https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html">DOM based XSS Prevention Cheat Sheet</a></p><p><a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">XSS Filter Evasion Cheat Sheet</a></p><p><a href="https://en.wikipedia.org/wiki/Cross-site_scripting#cite_note-11">Cross-site scripting</a></p><p><a href="https://en.wikipedia.org/wiki/Cross-site_request_forgery">Cross-site request forgery</a></p><p><a href="https://owasp.org/www-community/attacks/csrf">Cross Site Request Forgery (CSRF)</a></p><p><a href="https://zhuanlan.zhihu.com/p/25486768?group_id=820705780520079360">谈谈对 Web 安全的理解</a></p><p><a href="https://juejin.cn/post/6844903772930441230#heading-31">常见六大Web安全攻防解析</a></p><p><a href="https://baike.baidu.com/item/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/1739730?fr=aladdin">百度百科—中间人攻击</a></p><p><a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">wiki—中间人攻击</a></p><blockquote><p>本文作者：Axjy<br>微信公众号：Axjy前端学习库<br>版权声明：本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/cn/">CC BY-NC-SA 3.0 CN 许可协议</a>。转载请注明出处！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础快速入门</title>
      <link href="/2022/09/03/HTML%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/09/03/HTML%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>HTM知识体系</p><ul><li><p>HTML是什么</p></li><li><p>HTML发展历史</p></li><li><p>HTML在前端开发中的角色</p></li><li><p>HTML和JS&#x2F;CSS的关系</p></li><li><p>HTML如何使用，如何写出更加具有语义话的HTML</p></li></ul><h1 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h1><p>HTML(HyperText Markup Language,超文本标记语言),用于构建网页基本结构及其内容的标记语言。<br>超文本:文本中包含指向其他文本的链接<br>标记语言:将文本以及文本相关的其他信息结合起来,展现出关于文档结构,如:HTML、XML、KML、 Markdown等</p><p>发展历史</p><ul><li><p>1989年——伯纳斯-李提出了基于互联网的超文本系统</p></li><li><p>1993年——IETF(互联网工程任务组)发布首个TML提案,由此HTML语言第一版诞生</p></li><li><p>1994年——W3C成立,随后接管了HTML的标准化工作</p></li><li><p>1995年——在经历过几个草案之后HTML2.0发布（这个版本主要是补充一些基本功能,包括了基于表单的文件上传、表格、国际化等功能</p></li><li><p>1997年——1月发布了HTML3.2，随后12月发布了HTML4.0（这个 版本中采用了许多特定浏览器的元素类型和属性</p></li><li><p>2014年——HTML5作为W3C推荐标准发布</p><p>HTML5主要解决了几个问题：</p><p>1、文档结构的混乱，以前的文档结构过渡依赖于div标签，HTML提出了多种语义化的标签，使得文档便于理解，并且有利于SEO优化</p><p>2、解决了浏览器兼容问题，统一标准</p><p>3、扩展了外部应用的一些功能，提供了一些新的API</p></li></ul><h1 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h1><h2 id="HTML说明"><a href="#HTML说明" class="headerlink" title="HTML说明"></a>HTML说明</h2><ul><li><p>HTML文档包含多个HTML元素,元素具备不同的特性</p></li><li><p>HTML元素&#x3D;开始标签+结束标签+元素内容</p></li><li><p>一些元素只有一个标签,如img、 input、br等</p></li><li><p>HTML元素标签不区分大小写</p></li><li><p>元素可以嵌套在其他元素中间</p></li><li><p>元素可以拥有属性,属性包含有元素的额外信息</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815132516080.png" alt="image-20210815132516080"></p></li></ul><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815132441283.png" alt="image-20210815132441283"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;:放在HTML文档最前面的位置，加上之后就会按照W3C的HTML 5标准来解析渲染页面</span><br><span class="line"></span><br><span class="line">&lt;html&gt;:根元素，包含整个页面的内容</span><br><span class="line"></span><br><span class="line">&lt;head&gt;:对用户不可见，其中包含例如面向搜索引擎的关键字、页面描述、字符编码声明、CSS样式等</span><br><span class="line"></span><br><span class="line">&lt;body&gt;:该元素包含能够被用户访问到的内容，包括文本、图像、视频、游戏、音频等</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="head中包含的元素"><a href="#head中包含的元素" class="headerlink" title="head中包含的元素"></a>head中包含的元素</h3><p>meta</p><ul><li>charset</li><li>name</li><li>http- equiv</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">定义文档字符编码</span><br><span class="line">&lt;meta charset=&quot;utf- -8&quot;&gt; </span><br><span class="line"></span><br><span class="line">关键字</span><br><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;HTML&quot;&gt;</span><br><span class="line"></span><br><span class="line">页面描述</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;HTML基础&quot;&gt;</span><br><span class="line"></span><br><span class="line">主要用于移动端，定义设备屏幕上用来显示网页的区域</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device -width,initial- scale=1.0, maximum- scale=1.0, user - scalable=0&quot;&gt;</span><br><span class="line"></span><br><span class="line">http头部自定义meta,用于向特定网站提供一些信息https://wiki.whatwg.org/wiki/MetaExtensions</span><br><span class="line">&lt;meta &quot;http-equiv=&quot;expires&quot; content=&quot;31 Dec 2021&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>title</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;:页面的标题，显示在浏览器标签页上</span><br></pre></td></tr></table></figure><p>style</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;: CSS样式</span><br></pre></td></tr></table></figure><p>link</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当前页面的favicon</span><br><span class="line">&lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;</span><br><span class="line"></span><br><span class="line">链接到样式表</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;my- CcSs file.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">可替换的样式表(非所有浏览器支持)</span><br><span class="line">&lt;link href-&quot;fancy.css&quot; rel=&quot;alternate styleshet&quot; type=&quot;text/css&quot; title=&quot;Fancy&quot;&gt;</span><br></pre></td></tr></table></figure><p>script</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可执行脚本</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;javascript.js&quot;&gt;</span><br></pre></td></tr></table></figure><p>属性</p><ul><li>defer：立即下载， 延迟执行，表示脚本可以等到dom被完全解析和显示之后在执行，只对外部脚本有效。有defer属性的脚本会阻止DOMContentL oaded事件，直到脚本被加载并且解析完成。</li><li>async: 立即下载脚本， 不妨碍其他操作，比如下载其他资源或载其他脚本， 只对外部脚本有效</li></ul><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815134347111.png" alt="image-20210815134347111"></p><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><p>内联元素</p><ul><li>只占据它对应标签的边框所包含的空间</li><li>只能容纳文本或其他内联元素</li><li>只能通过修改水平边距、边框或者行高的方式改变尺寸</li><li>常用的内联元素: <code>&lt;a&gt;、 &lt;span&gt;. &lt;br&gt;、 &lt;i&gt;、 &lt;em&gt;、&lt;strong&gt;、&lt;label&gt;、 &lt;q&gt;. &lt;var&gt;、 &lt;cite&gt;、&lt;code&gt;</code></li></ul><p>块级元素</p><ul><li>占据其父元素的整行，总是从新行上开始</li><li>能容纳其他块元素或者内联元素</li><li>可以控制宽高、行高、边距、边框等改变其尺寸</li><li>常用的块级元素</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;、&lt;p&gt;、 &lt;h1&gt;-&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt; 、&lt;blockquote&gt; 、&lt;form&gt;</span><br></pre></td></tr></table></figure><p>行内块级元素</p><ul><li>元素在行内排列，不会独占一行</li><li>支持设置宽高以及垂直边距、边框</li><li>常用的内联元素: <code>&lt;img&gt;、 &lt;input&gt;、 &lt;td&gt;</code></li></ul><h3 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h3><p>根据内容的结构，选择合适的标签构建出便于开发者阅读的可维护性更高的代码结构，同时能够让机器<strong>更好地解析</strong>。</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815135522740.png" alt="image-20210815135522740"></p><p>语义化—区块</p><p>header</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;header&gt;</span><br><span class="line">- 展现介绍性信息</span><br><span class="line">- 通常包含一组介绍性或是辅助导航的元素，如标题、Logo、 搜索框、作者名称等</span><br><span class="line">- 不能放在&lt;footer&gt;、&lt;address&gt; 或者另一个&lt;header&gt;元素内部</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815140113980.png" alt="image-20210815140113980"></p><p>nav</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav&gt;</span><br><span class="line">- 在当前文档或其他文档中提供导航链接，如菜单、目录、索引等</span><br><span class="line">- 用来放置一些热门的链接，不常用的链接通常放到footer里置于底部</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815140125293.png" alt="image-20210815140125293"></p><p>article</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;article&gt;</span><br><span class="line">- 独立的文档、页面、应用、站点</span><br><span class="line">- 可独立分配的或可复用的结构，如论坛帖子、新闻文章、博客、用户提交的评论、交互式组件等</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815140346733.png" alt="image-20210815140346733"></p><p>section</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;section&gt;</span><br><span class="line">- 按主题将内容分组，通常会有标题</span><br><span class="line">- &lt;section&gt; 通常出现在文档的大纲中</span><br><span class="line">- 不要把&lt;section&gt;作为 普通容器来使用，比如说用于美化片段样式，此时用&lt;div&gt;更合适</span><br><span class="line">- 如果元素里边是独立的整块的内容，可以单发布，则更适合用&lt;article&gt;</span><br></pre></td></tr></table></figure><p>aside</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;aside&gt;</span><br><span class="line">- 表示一个和其余页面内容几乎无关的部分，或者说单独拆出来不会影响整体的内容</span><br><span class="line">- 通常放在侧边栏，用于展示广告、tips、 引用内容等</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815140821979.png" alt="image-20210815140821979"></p><p>footer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer&gt;</span><br><span class="line">- 表示最近一个章节的页脚</span><br><span class="line">- 通常包含该章节作者、版权数据或者文档链接等信息</span><br><span class="line">- footer内的元素不属于章节内容，不包含在大纲中</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815140922261.png" alt="image-20210815140922261"></p><p>可以看看<a href="https://developer.mozilla.org/zh-CN/docs/Learn">MDN</a>这个页面的语义化</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815141309105.png" alt="image-20210815141309105"></p><p>语义化-分组</p><p>figure、figcaption</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;figure&gt;/ &lt;figcaption&gt;</span><br><span class="line">- &lt;figure&gt; 包裹被独立引用的内容:图表、插图、代码等,通常会有一个标题</span><br><span class="line">- &lt;figcaption&gt;与其相关联的图表的说明/标题，通常位于&lt;figure&gt;的第一个或最后一一个</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815141745515.png" alt="image-20210815141745515"></p><p>blockquote</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;blockquote&gt;</span><br><span class="line">- 块级引用元素</span><br><span class="line">- cite属性表示该来源的url</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815141937538.png" alt="image-20210815141937538"></p><p>dl、dt、dd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;/ &lt;dt&gt;/ &lt;dd&gt;</span><br><span class="line">- 用于描述-组键值对</span><br><span class="line">- 通常用于元数据、术语定义等场景</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815142110423.png" alt="image-20210815142110423"></p><p>语义化—文本</p><p>cite</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;cite&gt;</span><br><span class="line">- &lt;cite&gt; 元素通常用于引用作品标题.</span><br><span class="line">- 包括论文、文件、书籍、电影等的引用</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>time</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;time&gt; &gt;</span><br><span class="line">- 机器可读的时间和日期</span><br><span class="line">- datetime表示此元素关 联的时间日期，若不指定则该元素不会被解析为日期</span><br></pre></td></tr></table></figure><p>其他</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;address&gt;某个人或组织的联系信息</span><br><span class="line">&lt;mark&gt;在引用中使用，表示需要引起注意</span><br><span class="line">&lt;code&gt;代码片段</span><br><span class="line">&lt;small&gt;免责声明、注意事项等</span><br></pre></td></tr></table></figure><h3 id="多媒体元素"><a href="#多媒体元素" class="headerlink" title="多媒体元素"></a>多媒体元素</h3><p>图片</p><p>  img</p><ul><li>src属性是必须的，嵌入图片的文件路径</li><li>alt属性包含一条对图像的文本描述，非强制。屏幕阅读器会将这些描述读给需要使用阅读器的使用者听，让他们知道图像的含义。图像无法加载时(网络错误、内容被屏蔽或链接过期时)，浏览器会在页面上显示alt属性中的文本</li><li>decoding 解码方式:异步、同步</li><li>loading懒加载</li></ul><p>picture</p><ul><li>元素通过包含零或多个<source>元素和一个<img>元素来为不同的显示&#x2F;设备场景提供相应的图像版本</li><li>media属性:依据的媒体条件渲染相应的图片，类似媒体查询</li><li>type属性: MIME类型，根据浏览器支持性渲染相应的图片</li></ul><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815142723085.png" alt="image-20210815142723085"></p><p>音视频</p><p>video</p><ul><li>src属性是必须的，嵌入视频文件路径</li><li>controls 是否展示浏览器自带的控件，可以创建自定义控件</li><li>autoplay是否自动播放</li><li>source元素表示视频的可替代资源(不同格式、清晰度，读取失败或无法解码时可以依次尝试)</li></ul><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815143258998.png" alt="image-20210815143258998"></p><h2 id="HTML解析"><a href="#HTML解析" class="headerlink" title="HTML解析"></a>HTML解析</h2><p>DOM(文档对象模型)：对节点结构化表述，并定义了一种方式可以使程序对该结构进行访问将web页面和脚本语言连接起来</p><ul><li>构建DOM树</li><li>样式计算，构建CSSOM树</li><li>将DOM和CSSOM组合成- -个Render树</li><li>布局计算</li><li>绘制</li></ul><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815150252169.png" alt="image-20210815150252169"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP备忘录之常用状态码&amp;请求头&amp;响应头&amp;Cookies及请求方法合集</title>
      <link href="/2022/09/03/HTTP%E5%A4%87%E5%BF%98%E5%BD%95%E4%B9%8B%E5%B8%B8%E7%94%A8%E7%8A%B6%E6%80%81%E7%A0%81&amp;%E8%AF%B7%E6%B1%82%E5%A4%B4&amp;%E5%93%8D%E5%BA%94%E5%A4%B4&amp;Cookies%E5%8F%8A%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E5%90%88%E9%9B%86%20/"/>
      <url>/2022/09/03/HTTP%E5%A4%87%E5%BF%98%E5%BD%95%E4%B9%8B%E5%B8%B8%E7%94%A8%E7%8A%B6%E6%80%81%E7%A0%81&amp;%E8%AF%B7%E6%B1%82%E5%A4%B4&amp;%E5%93%8D%E5%BA%94%E5%A4%B4&amp;Cookies%E5%8F%8A%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E5%90%88%E9%9B%86%20/</url>
      
        <content type="html"><![CDATA[<br># HTTP和HTTPS的区别图解<p>HTTPS和HTTP相比多了一层加密</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/10/02/image-20211002153855635.png" alt="image-20211002153855635"></p><br># HTTP的常用状态码<p><strong>200</strong> 👉OK，客户端请求成功</p><p><strong>301</strong>👉资源(网页等)被永久转移到其它URL</p><p><strong>302</strong>👉临时跳转</p><p><strong>401</strong> 👉Unauthorized -请求未经授权</p><p><strong>404</strong> 👉请求资源不存在，可能是输入了错误的URL</p><p><strong>500</strong> 👉服务器内部发生了不可预期的错误</p><p><strong>504</strong> 👉 Gateway Timeout-网关或者代理的服务器无法在规定的时间内获得想要的响应。</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/20/image-20210920192949824.png" alt="image-20210920192949824"></p><br># HTTP常用请求头（Request Headers）<p><strong>Accept</strong>：<br> 接收类型，表示浏览器支持的MIME类型（对标服务端返回的Content-Type）</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/10/02/image-20211002161729473.png" alt="image-20211002161729473"></p><p><strong>Content-Type</strong>：<br>客户端发送出去实体内容的类型</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/10/02/image-20211002161801679.png" alt="image-20211002161801679"></p><p><strong>Cache-Control</strong>：<br>指定请求和响应遵循的缓存机制，如no-cache</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/10/02/image-20211002163255317.png" alt="image-20211002163255317"></p><p><strong>If-Modified-Since</strong>：<br> 对应服务端的<code>Last-Modified</code>,用来匹配看文件是否变动，只能精确到1s之内</p><p><strong>Expires</strong>：<br>缓存控制，在这个时间内不会请求，直接使用缓存，服务端时间</p><p><strong>Max-age</strong>：<br> 代表资源在本地缓存多少秒，有效时间内不会请求，而是使用缓存</p><p><strong>If-None-Match</strong>：<br> 对应服务端的ETag,用来匹配文件内容是否改变（非常精确）</p><p><strong>Cookie</strong>：<br> 有cookie并且<strong>同域</strong>访问时会自动带上</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/10/02/image-20211002155443610.png" alt="image-20211002155443610"></p><p><strong>Referer</strong>：<br>该页面的来源URL（适用于所有类型的请求，会精确到详细页面地址，csrf拦截常用到这个字段）</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/10/02/image-20211002161835593.png" alt="image-20211002161835593"></p><p><strong>Origin</strong>：<br>最初的请求是从哪里发起的（只会精确到端口)）,Origin比Referer更尊重隐私</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/10/02/image-20211002161858626.png" alt="image-20211002161858626"></p><p><strong>User-Agent</strong>：<br> 用户客户端的一些必要信息，如UA头部等</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/10/02/image-20211002155948600.png" alt="image-20211002155948600"></p><h1 id="HTTP常用响应头（Response-Headers）"><a href="#HTTP常用响应头（Response-Headers）" class="headerlink" title="HTTP常用响应头（Response Headers）"></a>HTTP常用响应头（Response Headers）</h1><p><strong>Content-Type</strong>：<br> 服务端返回的实体内容的类型</p><p><strong>Cache-Control</strong>：<br>指定请求和响应遵循的缓存机制，如no-cache</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/10/02/image-20211002163336562.png" alt="image-20211002163336562"></p><p><strong>Last-Modified</strong>：</p><p> 请求资源的最后修改时间</p><p><strong>Expires</strong>：<br>应该在什么时候认为文档已经过期，从而不再缓存它</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/10/02/image-20211002163349623.png" alt="image-20211002163349623"></p><p><strong>Max-age</strong>：<br> 客户端的本地资源应该缓存多少秒，开启了Cache-Control后有效</p><p><strong>ETag</strong>：<br>资源的特定版本的标识符，<code>Etags</code>类似于指纹</p><p><strong>Set-Cookie</strong>：<br> 设置和页面关联的cookie,服务器通过这个头部把cookie传给客户端</p><p><strong>Server</strong>：<br>服务器的一些相关信息</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/10/02/image-20211002160637134.png" alt="image-20211002160637134"></p><p><strong>Access-Control-Allow-Origin</strong>：<br> 服务器端允许的请求Origin头部(譬如为*)</p><br># HTTP的各类请求方法<p><strong>GET</strong>： </p><p>请求一个指定资源的表示形式.使用GET的请求应该只被用于获取数据</p><p><strong>POST</strong>： </p><p>用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用</p><p><strong>PUT</strong>：   </p><p> 用请求有效载荷替换目标资源的所有当前表示</p><p><strong>DELETE</strong>： </p><p>删除指定的资源</p><p><strong>HEAD</strong>：    </p><p>请求一个与GET请求的响应相同的响应，但没有响应体</p><p><strong>CONNECT</strong>： </p><p>建立一个到由目标资源标识的服务器的隧道。</p><p><strong>OPTIONS</strong>： </p><p> 用于描述目标资源的通信选项。</p><p><strong>TRACE</strong>： </p><p>沿着到目标资源的路径执行一个消息环回测试。</p><p><strong>PATCH</strong>： </p><p>用于对资源应用部分修改。</p><br># HTTP的缓存<p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/09/20/image-20210920225414298.png" alt="image-20210920225414298"></p><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><p><strong>Expires</strong> ：时间不准</p><p><strong>Cache- Control的值有</strong></p><ul><li><strong>max-age</strong> :单位是秒，缓存时间计算的方式是距离发起的时间的秒数，超过间隔的秒数缓存失效</li><li><strong>no-cache</strong> :不使用强缓存，需要与服务器验证缓存是否新鲜</li><li><strong>no-store</strong> :禁止使用缓存(包括协商缓存)每次都向服务器请求最新的资源</li><li><strong>must-revalidate</strong> :在缓存过期前可以使用，过期后必须向服务器验证</li></ul><h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><p><strong>ETag&#x2F;lf-None-Match</strong>,：hash 码，代表的是一个资源的标识符</p><p><strong>Last- Modified&#x2F;lf- Modified-Since</strong>：文件的最后修改时间</p><br># 视频直播协议<table><thead><tr><th>协议</th><th>描述</th><th>优点</th></tr></thead><tbody><tr><td>HLS</td><td>1、HTTP Live Streaming, Apple公司<br>2、基于HTTP协议<br>3、把一段视频流，分成一个个小的基于HTTP的文件来下载</td><td>跨平台</td></tr><tr><td>RTMP</td><td>1、Real Time Messaging Protocol<br>2、Adobe公司<br>3、基于TCP</td><td>时延低</td></tr><tr><td>HTTP - FLV</td><td>1、基于HTTP<br>2、http+flv，将音视频数据封装成FLV格式，然后通过HTTP协议传输给客户端</td><td>时延低</td></tr></tbody></table><br># Cookie<p>Set-Cookie - response</p><table><thead><tr><th>Name&#x3D;value</th><th>各种cookie的名称和值</th></tr></thead><tbody><tr><td>Expires&#x3D;Date</td><td>Cookie的有效期，缺省时Cookie仅在浏览器关闭之前有效。</td></tr><tr><td>Path&#x3D; Path</td><td>限制指定Cookie的发送范围的文件目录，默认为当前</td></tr><tr><td>Domain&#x3D;domain</td><td>限制cookie生效的域名，默认为创建cookie的服务域名</td></tr><tr><td>secure</td><td>仅在HTTPS安全连接时，才可以发送Cookie</td></tr><tr><td>HttpOnly</td><td>JavaScript脚本无法获得Cookie</td></tr><tr><td><code>SameSite=[None\Strict\Lax]</code></td><td>- None同站、跨站请求都可发送<br>- Strict仅在同站发送<br>- 允许与顶级导航一起发送，并将与第三方网站发起的GET请求一起发送</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础下</title>
      <link href="/2022/09/03/CSS%E5%9F%BA%E7%A1%80%E4%B8%8B/"/>
      <url>/2022/09/03/CSS%E5%9F%BA%E7%A1%80%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<p>这节课程先从CSS的诞生背景和基础定义入手，初步认识CSS；然后介绍了如何能够正确地学习CSS。介绍了CSS关键的盒模型、文档流、布局、定位等关键概念和相关CSS属性，并展示了CSS装饰文档的可能性。最后，在简略看下如何调试eSS，以及当今都有什么工具可以帮助我们更好的写CSS、用更好的理念去用CSS。</p><h1 id="CSS常用规则"><a href="#CSS常用规则" class="headerlink" title="CSS常用规则"></a>CSS常用规则</h1><h2 id="布局相关"><a href="#布局相关" class="headerlink" title="布局相关"></a>布局相关</h2><h3 id="盒模型（重要）"><a href="#盒模型（重要）" class="headerlink" title="盒模型（重要）"></a>盒模型（重要）</h3><p>在具体介绍布局相关的属性之前，先要了解:在CSS中，所有的元素都被一个个的“盒子(box)”包围着，理解这些“盒子”的基本原理，是我们使用CSS实现准确布局、处理元素排列的关键。</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815215329724.png" alt="image-20210815215329724"></p><p>CSS中组成个块级盒子需要</p><ul><li>Content box:这个区域是用来显示内容，大小可以通过设置width和height.</li><li>Padding box:包围在内容区域外部的空白区域，大小通过padding相关属性设置。</li><li>Border box:边框盒包裹内容和内边距。大小通过border相关属性设置。</li><li>Margin box:这是最外面的区域，是盒子和其他元素之间的空白区域。大小通过margin相关属性设置。</li></ul><p>盒子</p><ul><li><p>块级盒子(block box)</p></li><li><p>内联盒子(inline box)。 </p><p>这两种盒子会在页面流(page flow)和元素之间的关系方面表现出不同的行为</p></li></ul><blockquote><p>关于盒模型可以看看这篇👉 <a href="https://juejin.cn/post/6988877671606272031">CSS盒模型的面试六问你能答出几个？</a>，如果完全不懂盒模型，则多百度几篇关于【盒模型】，【块级盒子】，【内联盒子】的文章，理解这些对布局很重要。</p></blockquote><p>盒模型的一些关键词</p><ul><li>margin:设置外边距</li><li>border:设置边框</li><li>padding:内边距</li><li>width &amp; height:内容宽高</li><li>box- sizing:修改宽高的定义范围</li><li>display:改变元素是块级盒子还是内联盒子的特征</li></ul><h3 id="正常文档流"><a href="#正常文档流" class="headerlink" title="正常文档流"></a>正常文档流</h3><p>默认的，块级元素按照基于其父元素的书写顺序(默认值:horizontal-tb)的块流动方向(block flow direction)放置</p><p>每个块级元素会在上一个元素下面另起一行，它们会被设置好的margin分隔。块级元素是垂直组织的。</p><p>内联元素的表现有所不同—它们不会另起一行;只要在其父级块级元素的宽度内有足够的空间，它们与其他内联元素被安排在同一行。</p><p>如果空间不够，溢出的文本或元素将移到新的一行。</p><h2 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h2><p>弹性盒子是一种用于按行或按列布局元素的一维布局方法。元素可以膨胀以填充额外的空间，收缩以应更小的空间。</p><p>弹性盒子关键词</p><ul><li>display: flex: 一键开启弹性盒子模式，替代正常文档流</li><li>flex-direction:更改弹性盒子的「主轴」</li><li>justify- content:子元素主轴线上如何对齐</li><li>align-items:子元素横轴线上如何对齐</li></ul><blockquote><p>弹性布局推荐阮一峰的这篇文章👉<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程</a>，如果是新手，一定要学会这种布局方式，超方便。<br><br>这篇也说的很详细，不过要翻强，是英文<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">css-tricks 弹性盒子介绍</a></p></blockquote><h2 id="定位（position）"><a href="#定位（position）" class="headerlink" title="定位（position）"></a>定位（position）</h2><p>position: static</p><p>不管是正常的文档流，还是弹性盒子，内里元素排布都是相互影响的。前面的元素占了一块地，后面的元素肯定得往后稍稍。</p><p>这其实只是其中一种「定位情况」， 叫「静态定位」具体到CSS就是position: static;默认给到每个元素</p><p>position: relative</p><p>position还能有其他值，比如「相对定位」， position: relative</p><p>相对定位在文档流中仍然占据位置，但可以用top, left, bottom, right 属性做一些偏移的操作</p><p>position: absolute,<br>这种叫「绝对定位」。绝对定位的元素完全脱离了文档流和什么弹性盒子。绝对定位的盒子的定位、大小，你可以完全指定。</p><p>此时top, left,已经不是相对于原位置，而是相对于一个非static定位的父元素容器I</p><p>position: fixed</p><p>它和absolute类似, 其top, left等属性是相对于浏览器窗口</p><p>z-index</p><p>因为非static值的position属性让元素之间可以相互覆盖，css 提供了z- index属性来控制哪个元素覆盖在最上层</p><blockquote><p> 除了布局流、弹性盒子和绝对定位的使用，还有float、table、grid 布局等可以自行探索</p></blockquote><h1 id="装饰领域"><a href="#装饰领域" class="headerlink" title="装饰领域"></a>装饰领域</h1><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><p>网页字体样式包括<code>类型、大小、颜色</code>基本效果，另外还包括一些特殊的样式，如<code>字体粗细、下划线、斜体、大小写样式</code>等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*文本尺寸*/</span><br><span class="line">font-size:18px;  </span><br><span class="line"></span><br><span class="line">/*文本字体*/</span><br><span class="line">font-family:&quot;隶书&quot;; </span><br><span class="line"></span><br><span class="line">/*文本加粗  bold 加粗  bolder 更粗*/</span><br><span class="line">font-weight:bold;    </span><br><span class="line"></span><br><span class="line">/*文本颜色*/</span><br><span class="line">color:red;   </span><br><span class="line"></span><br><span class="line"> /*文本倾斜  oblique也可以  但最好用italic*/</span><br><span class="line">font-style:italic;   </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/*文本水平居中  center 居中     justify  两端对齐       left 左对齐   right  右对齐*/</span><br><span class="line">text-align:center;  </span><br><span class="line"></span><br><span class="line">/*字符间距*/</span><br><span class="line">letter-spacing:2px;   </span><br><span class="line"></span><br><span class="line"> /*行高*/</span><br><span class="line">line-height:20px;    </span><br><span class="line"></span><br><span class="line">  /*首行缩进*/</span><br><span class="line">text-indent:2em;  </span><br><span class="line"></span><br><span class="line">/*单词间距*/</span><br><span class="line">word-spacing:2px;   </span><br><span class="line"></span><br><span class="line"> /*垂直居中*/</span><br><span class="line">line-height:2px;    </span><br><span class="line"></span><br><span class="line">/*字符装饰线   underline  下划线       line-through   删除线     overline  上画线    更多用于超链接样式*/</span><br><span class="line">text-decoration:underline;   </span><br></pre></td></tr></table></figure><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*背景颜色*/</span><br><span class="line">background-color:#ccc;    </span><br><span class="line"></span><br><span class="line">/*背景图片 可以简写   直接加颜色   就是添加背景颜色  图片也一样*/</span><br><span class="line">background-image:url(img/*.jpg);   </span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background">MDN CSS background 属性</a></p></blockquote><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border">MDN CSS border 属性</a></p></blockquote><h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><p>盒子阴影</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815230238248.png" alt="image-20210815230238248"></p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-shadow">MDN CSS box-shadow 属性</a></p><p><a href="https://juejin.cn/post/6982595708796796965">最全的CSS阴影总结</a></p></blockquote><p>文字阴影</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815230221504.png" alt="image-20210815230221504"></p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-shadow">MDN text-shadow</a> </p></blockquote><h2 id="交互相关"><a href="#交互相关" class="headerlink" title="交互相关"></a>交互相关</h2><p>cursor</p><p>属性设置光标的类型（如果有），在鼠标指针悬停在元素上时显示相应样式。</p><blockquote><p>MDN <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/cursor">cursor-pointer</a></p></blockquote><p>过渡 transition</p><p>过渡可以为一个元素在不同状态之间切换的时候定义不同的过渡效果。比如在不同的伪元素之间切换，像是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:hover"><code>:hover</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:active"><code>:active</code></a> 或者通过 JavaScript 实现的状态变化。</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition">MDN transition</a></p></blockquote><p>动画 animation</p><p><code>animation</code> 属性用来指定一组或多组动画，每组之间用逗号相隔。</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation">MDN animation</a></p></blockquote><p>transform</p><p>**<code>transform</code>**属性允许你旋转，缩放，倾斜或平移给定元素。这是通过修改CSS视觉格式化模型的坐标空间来实现的。</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform">MDN transform</a></p><p><a href="https://juejin.cn/post/6976617452738183176">CSS之详解2D转换</a></p></blockquote><h1 id="CSS精益求精"><a href="#CSS精益求精" class="headerlink" title="CSS精益求精"></a>CSS精益求精</h1><h2 id="CSS调试"><a href="#CSS调试" class="headerlink" title="CSS调试"></a>CSS调试</h2><p>审查CSS</p><p>从页面上选择一个元素，可以右键该元素，选择审查元素（Inspect) </p><p>从DevTools左侧HTML tree中选择该元素。</p><ul><li>在面板里，你可以直接开关、编辑、新增属性的值。</li></ul><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815231547558.png" alt="image-20210815231547558"></p><h2 id="CSS扩展"><a href="#CSS扩展" class="headerlink" title="CSS扩展"></a>CSS扩展</h2><p>CSS预选择器</p><p>另一种组织CSS的方法是利用一些对于前端开发者可用的工具，它们让你可以稍微更程式化地编写CSS。预处理工具以你的原文件为基础运行，将它们转化为样式表。</p><p>代表工具有: </p><ul><li>less</li><li>sass</li><li>stylus</li></ul><blockquote><p><a href="https://juejin.cn/column/6992233701916540936">less学习指南</a></p></blockquote><h2 id="CSS革新"><a href="#CSS革新" class="headerlink" title="CSS革新"></a>CSS革新</h2><p>这些年CSS的发展，我们编写样式已经不一定需要写css文件了。</p><p>以styled- components为代表的CSS -in-js 方案，用JavaScript的力量武装css</p><blockquote><p><a href="https://styled-components.com/">styled- components官网</a></p></blockquote><p>以tailwindcss为代表的utility- class方案，改样式就改html文件即可，用有限的选择帮助你定好设计规范。</p><blockquote><p><a href="https://www.tailwindcss.cn/">tailwindcss官网</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础上</title>
      <link href="/2022/09/03/CSS%E5%9F%BA%E7%A1%80%E4%B8%8A/"/>
      <url>/2022/09/03/CSS%E5%9F%BA%E7%A1%80%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<p>这节课程先从CSS的诞生背景和基础定义入手，初步认识CSS；然后介绍了如何能够正确地学习CSS。介绍了CSS关键的盒模型、文档流、布局、定位等关键概念和相关CSS属性，并展示了CSS装饰文档的可能性。最后，在简略看下如何调试CSS，以及当今都有什么工具可以帮助我们更好的写CSS、用更好的理念去用CSS。</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>CSS是啥？</li><li>CSS怎么学？</li><li>CSS基础</li><li>CSS进阶</li></ul><h1 id="CSS是啥"><a href="#CSS是啥" class="headerlink" title="CSS是啥"></a>CSS是啥</h1><p>CSS,层叠样式表(cascading syle sheets)，-种用来为结构化文档(基本就是html)添加样式的语言。</p><p>举例来说，要选择一个HTML页面里所有的段落元素，然后将其中的文本改成红色，可以这样写CSS</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/16/image-20210815202724354.png" alt="image-20210815202724354"></p><p>在学习HTML时，我们可以看到浏览器给予每个标签的默认样式。</p><p>有了CSS，我们可以给文档添加自定义样式</p><ul><li>比如改变标题和链接的颜色及大小。</li><li>也可用于修改布局</li><li>比如将一个单列布局变成双列，包含主要内容区域和存放相关信息的侧边栏区域。</li><li>另外还可以用来做一些特效和动画</li></ul><h2 id="CSS诞生背景"><a href="#CSS诞生背景" class="headerlink" title="CSS诞生背景"></a>CSS诞生背景</h2><p>在没有css以前，所有样式都混在html里。假如一个标题要用斜体字、红色的字符、白色的底色的话，要这样写:</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815203234600.png" alt="image-20210815203234600"></p><p>有了CSS之后，样式就可以和文章结构分离了。</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815203729298.png" alt="image-20210815203729298"></p><p>除了做到分离，CSs 这一个样式语言单独抽出来，能够提供更大的表达空间;</p><p>上面例子里，css语法一样可以合在html里写。</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815203842675.png" alt="image-20210815203842675"></p><h2 id="CSS基础规则"><a href="#CSS基础规则" class="headerlink" title="CSS基础规则"></a>CSS基础规则</h2><p>让我们来仔细CSS的结构<br>整个结构称为规则集(通常简称“规则”)，各部分释义如下:</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815204238678.png" alt="image-20210815204238678"></p><ul><li>选择器:选择了个或多个需要添加样式的元素(在这个例子中就是p元素)</li><li>声明：一个单独的规则，如color: red;用来指定添加样式元素的属性。</li><li>属性:指定要改变HTML元素样式</li><li>属性的值：从指定属性的众多外观中选择个值(除了red之外还有很多color的值)</li></ul><p>注意1</p><ul><li>每个规则集（除了选择器的部分）都应该包含在成对的大括号里<code>&#123;&#125;</code></li><li>在每个声明里要用冒号<code>:</code> 将属性与属性值分隔开。</li><li>在每个规则集里要用分号<code>;</code>将各个声明分隔开。</li></ul><p>注意2</p><ul><li>如果要同时修改多个属性，只需要将它们用分号隔开</li><li>也可以选择多种类型的元素并为它们添加一组相同的样式。将不同的选择器用逗号分开</li></ul><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815204639398.png" alt="image-20210815204639398"></p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>选择器有许多不同的类型。上面只介绍了元素选择器，用来选择HTML文档中给定的元素。但是选择操作可以更加具体。</p><p>下面是一 些常用的选择器类型:</p><table><thead><tr><th>选择器名称</th><th>选择的内容</th><th>示例</th></tr></thead><tbody><tr><td>元素选择器(也称作标签或类型选择器)</td><td>所有指定(该)类型的HTML元素</td><td>p<br>选择<p></p></td></tr><tr><td>ID选择器</td><td>具有特定ID的元素(单一HTML页面中，每个ID只对应一个元素， 一个元素只对应一个ID)</td><td>#my-id<br>选择 <p id="my-id">或 <a id="my-id"></a></p></td></tr><tr><td>类选择器</td><td>具有特定类的元素(单一页面中，一个类   可以有多个实例)</td><td>.my-class   <br>  选择&lt;p class&#x3D; ”my-class”&gt;和 <a class="my-class"></a></td></tr><tr><td>属性选择器</td><td>拥有特定属性的元素</td><td>img[ src]<br>选择<code>&lt;img src=&quot; my image.png&quot;&gt;</code>而不是&lt; img&gt;</td></tr><tr><td>伪(Pseudo) 类选择器</td><td>特定状态下的特定元素(比如鼠标指针悬停)</td><td>a: hover<br>仅在鼠标指针悬停在链接上时选择<a>。</a></td></tr></tbody></table><p>层叠与继承</p><p>CSS代表层叠样式表(Cascadjing Style Sheets)，理解第一个词cascading很重要——cascade的表现方式是理解CSS的关键。</p><p>示例</p><p>我们有两个关于h1的规则。h1最后显示【红色】</p><ul><li>这些规则有相同的优先级，但顺序在最后的生效。</li></ul><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815205856519.png" alt="image-20210815205856519"></p><p>浏览器有个选择器优先级来决定规则，基本上是一个选择器越具体越优先。</p><ul><li><p>一个元素选择器不是很具体👉会选择页面上该类型的所有元素</p></li><li><p>一个类选择器稍微具体点👉它会选择该页面中有特定class属性值的元素一所以它的优先级就要高一点。</p><p>示例</p><p>下面的h1最后会显示绿色</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815210331224.png" alt="image-20210815210331224"></p></li></ul><p>一些设置在父元素上的css属性是可以被子元素继承的，有些则不能。</p><p>示例</p><p>如果你设置一个元素的color 和font- family，每个在里面的元素也都会有相同的属性值，除非你直接在元素上设置属性。</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815210843425.png" alt="image-20210815210843425"></p><p>这些概念一起来控制css规则应用于哪个元素;有时候会感觉有些复杂，但是当你对css有更多经验的时候，你就可以记住它们，即便忘记了细节，可以在网上查到。</p><p>看一个更复杂的例子</p><p>【颜色】和【字体加粗】都被继承了；【边框border】 就没有(不然每个子元素都有框框得多丑)，说明浏览器会根据常识判断哪些属性该被继承；</p><p><img src="https://gitee.com/Olivivian/PicGoImages/raw/master/img//Typora/typora-user-images/2021/08/15/image-20210815212610017.png" alt="image-20210815212610017"></p><h1 id="CSS怎么学"><a href="#CSS怎么学" class="headerlink" title="CSS怎么学"></a>CSS怎么学</h1><h2 id="免费课程"><a href="#免费课程" class="headerlink" title="免费课程"></a>免费课程</h2><p>在进一步讲解CSS有哪些规则之前，先给大家分享几个学习资源。因为CSS的内容非常多，也非常适合自学，这里给大家几个课后能不断耕耘CSS知识的免费网站。</p><p><a href="https://www.codecademy.com/">codecademy</a>【英文】</p><p>老牌在线编程教育网站。全程交互式自助式学习体验。非常适合CSS 边学边练的场景。</p><p><a href="https://www.udacity.com/">udacity</a>【视频类】</p><p>也是老牌在线编程教育网站。虽然是外文站点，但进入课程内中文是拉满的。</p><p>推荐理由</p><ul><li>是免费;</li><li>是视频式教学+课后实验互动的形式，给喜欢看着老师讲解的同学推荐。</li></ul><p><a href="https://www.w3school.com.cn/">w3school</a>和<a href="https://www.runoob.com/">runoob</a></p><p>免费，交互式，内容相当全面，不错的实操演练场。</p><p><a href="https://www.freecodecamp.org/">freecodecamp【英文地址】</a> Or <a href="https://chinese.freecodecamp.org/">freecodecamp【中文地址】</a></p><p>Github上star最多的项目。由社区贡献而成的全面的程序员自学课程。</p><p>挑一个</p><p>推荐顺序的话就是从前到后推荐。就是<code>专业在线课程团队出品&gt;自助式学习≈社区型自助式</code>。<br>如果你是零基础，上面任一个课程， 一个周未左右应该能学的差不多。有了基础后， 以后你再想深挖哪个场景下的css应用规则，再去看文档即可。什么场景(字体、定位、颜色等)查哪些属性你心中应已了然。</p><blockquote><p>以上是老师推荐，个人推荐，自己觉得哪个适合自己选哪个，其实知识都是那些，只是学习方式不同而已，所以选择自己喜欢的方式即可</p></blockquote><h2 id="持续学习"><a href="#持续学习" class="headerlink" title="持续学习"></a>持续学习</h2><p>下面这些真学习资料， 如果你干前端这行，它们会陪你到一辈子。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">MDN文档</a></p><p>CSS文档库。基本会是前端程序员最常来的地方(html、8 js规则也在里面)。同时，里面还有丰富的各式教程，作为一个自由探索的网站也是相当不错。</p><p><a href="https://css-tricks.com/almanac/">css-tricks</a></p><p>另一个Css文档库，用有别于mdn的形式组织css知识，还有非常活跃的css社区，里面有各种奇技淫巧。作为mdn文档的补充相当合适。</p><p><a href="https://www.w3.org/Style/CSS/">*w3c CSS 标准</a></p><p>前面的不管是教程还是文档，基本只会教你用法。大部分用法其实也是自说明的，比如color; red;就是文本变成红色，还要啥自行车?</p><p>但:</p><ul><li><p>现实中有很多CSs规则，在不同的场景下会不同的表现，而普通文档不会告诉你为什么(甚至不告诉你有这事儿)</p></li><li><p>不像color这种，有很多CSS规则射组合起来使用会实现很神奇的效果，你可能会好奇为什么(其实color能影响的远不止文本的颜色，你想知道么? )</p><p>w3c文档，就是解答这些问题（平时基本不逛，遇到问题时可在这查询）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github pages博客搭建</title>
      <link href="/2017/08/12/Hexo-github-pages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/08/12/Hexo-github-pages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p> <img src="/2017/08/12/Hexo-github-pages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/03.jpg" alt="配图"></p><p>因为怎么搭建的教程已经有很多详细的文档了，所以我就不再写具体的搭建过程。而是写下大致流程、遇到的问题与相关链接推荐。对自己博客搭建做一个记录的同时也希望能对你有所帮助。</p><p>先放上：<a href="https://hexo.io/docs/index.html">官方文档</a></p><p>主要针对window操作系统，Mac可以参考<a href="http://huangnx.com/2016/03/17/BlogPlatByHexoAndGithub/">这里</a>。</p><hr><h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备:"></a>安装前准备:</h3><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p> <a href="http://www.runoob.com/nodejs/nodejs-install-setup.html">Node.js安装教程</a></p><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p><a href="http://www.cnblogs.com/shiy/p/6441552.html">git安装教程</a></p><h4 id="注册github账号"><a href="#注册github账号" class="headerlink" title="注册github账号"></a>注册github账号</h4><p><a href="https://jingyan.baidu.com/article/455a9950abe0ada167277864.html">注册github教程（一）</a><br><a href="https://jingyan.baidu.com/article/ff42efa93b2ed6c19e22021c.html">注册github教程（二）</a><br><em>注意：github的用户名一经注册就不能改变，所以起的时候尽量起些有意义的，当初注册的时候不知道随便起了一个名字，现在只能一直顶着这个名字了。用户名与昵称(Name)不同，昵称可以变化。</em></p><hr><p>前面的都弄清楚，就可以来搭建博客了</p><h3 id="推荐教程"><a href="#推荐教程" class="headerlink" title="推荐教程"></a>推荐教程</h3><p><a href="https://jingyan.baidu.com/article/d8072ac47aca0fec95cefd2d.html">史上最详细“截图”搭建Hexo博客并部署到Github</a></p><h3 id="我搭建过程踩到的坑"><a href="#我搭建过程踩到的坑" class="headerlink" title="我搭建过程踩到的坑"></a>我搭建过程踩到的坑</h3><p>1、创建仓库的时候注意Repository的名字，仓库名称格式必须是【github用户名.github.io】。<em>此处就体现出了起一个好的github用户名的好处，真是一把辛酸泪。</em><br><img src="/2017/08/12/Hexo-github-pages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/01.png" alt="我的博客仓库"><br>2、_config.yml配置的时候，冒号后面一定要有一个空格。<em>当时因为这个问题，走了好多弯路</em>。还有就是<code>hexo</code>在2点几的版本中<code>type: github</code>。之后的版本是<code>type: git</code>。<br><img src="/2017/08/12/Hexo-github-pages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/02.png" alt="配置问题.png"></p><h3 id="其它可能出现的问题："><a href="#其它可能出现的问题：" class="headerlink" title="其它可能出现的问题："></a>其它可能出现的问题：</h3><ul><li>错误：执行<code>$hexo deloy</code>，提示<code>Error Deployer not found：git</code><br>解决：<code>$ npm install hexo-deployer-git --save</code></li></ul><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p> 一般来说按照流程一步一步的走是不会出错的，但是，意外总是发生的猝不及防，如果你不幸踩到了什么奇怪的坑，那就只能Wish you good luck！</p><h3 id="其它参考"><a href="#其它参考" class="headerlink" title="其它参考"></a>其它参考</h3><blockquote><p><a href="http://www.cnblogs.com/dantefung/p/d8c48ba8030bcab7cfc364d423186fee.html">《Hexo+github搭建个人博客》</a><br><a href="https://help.github.com/">github帮助文档</a><br><a href="http://www.jianshu.com/p/e1cbc8b98aaf">MarkDown简单入门</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终于搭好了</title>
      <link href="/2017/08/11/%E7%BB%88%E4%BA%8E%E6%90%AD%E5%A5%BD%E4%BA%86/"/>
      <url>/2017/08/11/%E7%BB%88%E4%BA%8E%E6%90%AD%E5%A5%BD%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p> <img src="/2017/08/11/%E7%BB%88%E4%BA%8E%E6%90%AD%E5%A5%BD%E4%BA%86/01.jpg" alt="新生"></p><blockquote><p>发布第一篇文章，用于测试。<br>嗯，这是一篇非常正经的测试（吐槽）文章</p></blockquote><p>花了两天的时间终于把自己的独立博客搭好，虽然博客在哪都能写，但是看别人的独立博客还可以自己定制功能，感觉很有意思的样子，便利用空闲时间去网上搜教程准备自己也搭一个。    </p><p>   网上有很多教程，但有的时候多也不是一个好事，在众多教程中挑了一个看上去还比较详细的教程照着搭。一直搭到本地测试都没有问题，部署到github之后以为就要搞定了，结果输入地址，出现的却是404页面。然后接着就是各种找解决的办法了，这心酸的过程就不多说，反正最后终于还是让我搞出来了，哈哈哈！</p><p>其实如果只是搭一个基本框架出来是花不了多久的，但是就像盖房子，房子盖好了，你能忍受不去装修它么。我搭好的第一件事就是去把默认的主题换了，光是选主题就花了我大半天的时间，因为我既希望它好看，又希望它简洁，我把Hexo官网的所有主题都看了一遍，最后选择了next主题，其实还有其它几款主题感觉也不错，但是next详细的使用文档让人无法拒绝它。房子装修完就该放家具了，现在还在慢慢放家具中，所以此处先略过以后再说。</p><p>  这期间最难过的不是搭建的过程，也不是搭建出现的错误，而是已经很久没有生过病的我竟然在这大夏天感冒了。经历过才知道备一些常用药的重要性，因为你不一定会有时间去医院。发着烧去挤轻轨，头晕的厉害，感觉特别难受，当时还有闲心想还好没有座位，避免了让座的尴尬，因为这个时候坐下估计就不想起来了。之前一直不知道原来感冒还分风寒感冒和风热感冒，开始吃的是朋友备的感冒药，但是效果不大，之后去药房拿药才知道我是风热感冒，而朋友的是风寒感冒药，这真是吃个感冒药也是有大学问。</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用于测试</title>
      <link href="/2017/08/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
      <url>/2017/08/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p> <img src="/2017/08/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/01.jpg" alt="新生"></p><blockquote><p>测试测试</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
